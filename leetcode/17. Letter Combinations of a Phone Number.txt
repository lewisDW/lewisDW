class Solution {
public:
    vector<string> letterCombinations(string digits) {
        string *map = new string[10];  
        map[0] = "";  
        map[1] = "";  
        map[2] = "abc";  
        map[3] = "def";  
        map[4] = "ghi";  
        map[5] = "jkl";  
        map[6] = "mno";  
        map[7] = "pqrs";  
        map[8] = "tuv";  
        map[9] = "wxyz"; 
        vector<string> res;
        if(digits.size()==0) return res;
        string tmp;
        dfs(res,map,0,digits,tmp);
        return res;
    }

    void dfs(vector<string> &res,string *map,int index,string digits,string tmp) //tmp前面加不加上&都是对的，而res必须用引用
    {
        if(index==digits.size())
        {
            res.push_back(tmp);
            return;
        }
        for(int i=0;i<map[digits[index]-'0'].size();i++)
        {
            tmp.push_back(map[digits[index]-'0'][i]);
            dfs(res,map,index+1,digits,tmp);
            tmp.pop_back();                                                      //深搜完成之后再pop_back！
        }
    }
    
};